name: Update products.json from Baserow (CSV)

on:
  schedule:
    - cron: "0 * * * *"    # stündlich
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Baserow public view (CSV export)
        run: |
          set -euxo pipefail
          SLUG="uSOIDTc6fT_AkuuyIc-wYUQCgD1XCz0SMM3k8MVQ-OA"
          URL="https://db.pflugsmuehle.de/public/grid/${SLUG}/export/?format=csv"
          echo "Fetching: $URL"
          curl -fsSL "$URL" -o raw_baserow.csv
          echo "First lines of CSV:"
          head -n 5 raw_baserow.csv || true

      - name: Map CSV to products.json
        run: |
          set -e
          cat > map_csv.js << 'EOF'
          const fs = require('fs');

          // --- simple CSV parser (UTF-8, Komma- oder Semikolon-getrennt) ---
          function parseCSV(text) {
            // Detect delimiter: if ; appears more than , in header, use ;
            const firstLine = text.split(/\r?\n/)[0] || '';
            let delim = ',';
            const commas = (firstLine.match(/,/g) || []).length;
            const semis  = (firstLine.match(/;/g) || []).length;
            if (semis > commas) delim = ';';

            const rows = [];
            let i = 0, field = '', inQuotes = false, row = [];
            while (i < text.length) {
              const c = text[i];
              if (inQuotes) {
                if (c === '"') {
                  if (text[i+1] === '"') { field += '"'; i++; } // escaped "
                  else inQuotes = false;
                } else field += c;
              } else {
                if (c === '"') inQuotes = true;
                else if (c === '\r') { /* ignore */ }
                else if (c === '\n') { row.push(field); rows.push(row); row = []; field = ''; }
                else if (c === delim) { row.push(field); field = ''; }
                else field += c;
              }
              i++;
            }
            // last field/row
            if (field.length > 0 || row.length > 0) { row.push(field); rows.push(row); }
            return rows;
          }

          const csv = fs.readFileSync('raw_baserow.csv','utf8').trim();
          if (!csv) {
            console.error('CSV leer — liefert der Public-Export Inhalte?');
            process.exit(1);
          }
          const table = parseCSV(csv);
          if (!table.length) {
            console.error('CSV konnte nicht geparst werden.');
            process.exit(1);
          }

          const header = table[0].map(h => h.trim());
          const idx = (name) => header.findIndex(h => h.toLowerCase() === name.toLowerCase());

          // Deine Spaltennamen:
          const colArtikelId = header.findIndex(h => /artikel-id/i.test(h));
          const colBeschreibung = header.findIndex(h => /beschreibung|name/i.test(h));
          const colBruttopreis = header.findIndex(h => /bruttopreis/i.test(h));
          const colMwst = header.findIndex(h => /mwst|mwst-satz|mehrwertsteuer/i.test(h));

          function toNum(v) {
            if (v == null) return 0;
            const s = String(v).replace(/\./g,'').replace(',','.');
            const n = Number(s);
            return isNaN(n) ? 0 : n;
          }

          const out = [];
          for (let r = 1; r < table.length; r++) {
            const row = table[r];
            if (!row || row.length === 0) continue;
            const name = (row[colBeschreibung] || '').trim();
            if (!name) continue;
            out.push({
              id: (row[colArtikelId] || '').trim() || String(r),
              name,
              price_gross: toNum(row[colBruttopreis]),
              vat_rate: toNum(row[colMwst]),
            });
          }

          fs.writeFileSync('products.json', JSON.stringify(out, null, 2));
          console.log('products.json erzeugt, Anzahl Artikel:', out.length);
          EOF

          node map_csv.js
          echo "Preview products.json:"
          head -n 30 products.json || true

      - name: Commit changes (if any)
        run: |
          if git diff --quiet -- products.json; then
            echo "No changes in products.json"
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add products.json
            git commit -m "Update products.json from Baserow (CSV)"
            git push
          fi
