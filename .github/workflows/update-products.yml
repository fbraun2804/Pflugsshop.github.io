name: Update products.json from Baserow

on:
  schedule:
    - cron: "0 * * * *"   # stündlich
  workflow_dispatch:      # manuell startbar

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Try fetching Baserow public view (robust)
        run: |
          set -e
          SLUG="uSOIDTc6fT_AkuuyIc-wYUQCgD1XCz0SMM3k8MVQ-OA"

          # Kandidaten-URLs (wir probieren, bis eine 200 liefert)
          CANDIDATES=(
            "https://db.pflugsmuehle.de/public/grid/${SLUG}/export/?format=json"
            "https://db.pflugsmuehle.de/api/public/grid/${SLUG}/?page=1&size=200&user_field_names=true"
            "https://db.pflugsmuehle.de/public/grid/${SLUG}"  # Fallback: HTML (nur zum Debuggen)
          )

          STATUS=0
          SUCCESS_URL=""
          for URL in "${CANDIDATES[@]}"; do
            echo ">> Versuch: $URL"
            # Wir folgen Weiterleitungen (-L), zeigen Fehler (-S), schreiben Header/Status
            HTTP_CODE=$(curl -sS -L -w "%{http_code}" -o raw_baserow.json "$URL" || true)
            echo "HTTP_CODE=$HTTP_CODE"
            # Wenn 200, stoppen
            if [ "$HTTP_CODE" = "200" ]; then
              SUCCESS_URL="$URL"
              break
            fi
            # Zum Debug: ersten 300 Zeichen ausgeben
            echo "Antwort-Auszug:"
            head -c 300 raw_baserow.json || true
            echo; echo "----"
          done

          if [ -z "$SUCCESS_URL" ]; then
            echo "Keine der Kandidaten-URLs lieferte 200. Abbruch."
            exit 1
          fi

          echo "Erfolgreich geladen von: $SUCCESS_URL"
          echo "Erste 200 Zeichen:"
          head -c 200 raw_baserow.json || true
          echo

      - name: Map fields to frontend format
        run: |
          set -e
          cat > map.js << 'EOF'
          const fs = require('fs');

          const text = fs.readFileSync('raw_baserow.json','utf8').trim();

          // Prüfen, ob es JSON ist (export liefert JSON / ggf. Array)
          let data;
          try {
            data = JSON.parse(text);
          } catch(e) {
            console.error("Die Antwort ist kein JSON (vermutlich HTML der öffentlichen Grid-Seite).");
            console.error(text.slice(0, 300));
            process.exit(1);
          }

          const rows = Array.isArray(data) ? data : (data.results || []);

          const toNum = v => {
            if (v === null || v === undefined) return 0;
            const n = Number(String(v).replace(',', '.'));
            return isNaN(n) ? 0 : n;
          };

          const out = rows.map(r => ({
            id: r['Artikel-ID'] ?? r.id,
            name: r['Beschreibung'] ?? r['Name'] ?? '',
            price_gross: toNum(r['Bruttopreis']),
            vat_rate: toNum(r['MwSt-Satz']),
          })).filter(x => x.name);

          fs.writeFileSync('products.json', JSON.stringify(out, null, 2));
          console.log("products.json erzeugt. Anzahl:", out.length);
          if (!out.length) {
            console.warn("Hinweis: 0 Artikel. Prüfe Spaltennamen oder ob die View Leerzeilen enthält.");
          }
          EOF

          node map.js
          echo "Preview products.json:"
          head -n 30 products.json || true

      - name: Commit changes (if any)
        run: |
          if git diff --quiet -- products.json; then
            echo "No changes in products.json"
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add products.json
            git commit -m "Update products.json from Baserow"
            git push
          fi
